services:
  nginx:
    depends_on:
      wordpress:
        condition: service_healthy
      # Bonus
      adminer:
        condition: service_started
      static_website:
        condition: service_started
    build:
      context: requirements/nginx
      dockerfile: Dockerfile
      args:
        - FQDN=${FQDN}
        - STATIC_WEBSITE_FQDN=${STATIC_WEBSITE_FQDN}
        - WP_ROOT=${WP_ROOT}
        - ADMINER_ROOT=${ADMINER_ROOT}
    init: true
    ports:
      - "443:443"
    networks:
      - inception_network
    volumes:
      - wordpress_files:${WP_ROOT}
      # Bonus
      - adminer:${ADMINER_ROOT}
      - static_website_files:${STATIC_WEBSITE_ROOT}
    env_file: .env
    healthcheck:
      test: service nginx status || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always
  mariadb:
    build:
      context: requirements/mariadb
      dockerfile: Dockerfile
    init: true
    networks:
      - inception_network
    volumes:
      - wordpress_db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db_root_password
      - MYSQL_PASSWORD_FILE=/run/secrets/db_password
    env_file: .env
    healthcheck:
      test: /healthcheck.sh
      interval: 2s
      retries: 10
      start_period: 4s
      timeout: 20s
    secrets:
      - db_password
      - db_root_password
    restart: always
  wordpress:
    depends_on:
      mariadb:
        condition: service_healthy
      # Bonus
      redis:
        condition: service_started
    build:
      context: requirements/wordpress
      dockerfile: Dockerfile
      args:
        - WP_ROOT=${WP_ROOT}
        - WP_VERSION=${WP_VERSION}
        - PHP_VERSION=${PHP_VERSION}
        - WEB_BASE_DIR=${WEB_BASE_DIR}
    init: true
    networks:
      - inception_network
    volumes:
      - wordpress_files:${WP_ROOT}
    environment:
      - WORDPRESS_DB_HOST=mariadb:3306
      - MYSQL_PASSWORD_FILE=/run/secrets/db_password
      - WORDPRESS_CREDENTIALS_FILE=/run/secrets/credentials
      - FQDN=${FQDN}
      - WEB_BASE_DIR=${WEB_BASE_DIR}
      # Bonus
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    env_file: .env
    healthcheck:
      test: >
        SCRIPT_FILENAME=/healthcheck.php
        REQUEST_METHOD=GET
        cgi-fcgi -bind -connect wordpress:9000 | grep 'OK' || exit 1
      interval: 4s
      retries: 20
      start_period: 6s
      timeout: 30s
    secrets:
      - db_password
      - credentials
      # Bonus
      - redis_password
    restart: always
  # Bonus
  redis:
    build:
      context: requirements/bonus/redis
      dockerfile: Dockerfile
    init: true
    networks:
      - inception_network
    volumes:
      - redis_dump:/var/lib/redis/
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    healthcheck:
      test: /healthcheck.sh
      interval: 2s
      retries: 10
      start_period: 4s
      timeout: 20s
    secrets:
      - redis_password
    restart: always
  vsftpd:
    build:
      context: requirements/bonus/vsftpd
      dockerfile: Dockerfile
      args:
        - WP_ROOT=${WP_ROOT}
        - PASV_MIN_PORT=${PASV_MIN_PORT}
        - PASV_MAX_PORT=${PASV_MAX_PORT}
    init: true
    ports:
      - '21:21'
      - '${PASV_MIN_PORT}-${PASV_MAX_PORT}:${PASV_MIN_PORT}-${PASV_MAX_PORT}'
    networks:
      - inception_network
    volumes:
      - wordpress_files:${WP_ROOT}
    env_file: .env
    environment:
      - VSFTPD_PASSWORD_FILE=/run/secrets/vsftpd_password
    healthcheck:
      test: /healthcheck.sh
      interval: 10s
      timeout: 5s
      retries: 3
    secrets:
      - vsftpd_password
    restart: always
  adminer:
    depends_on:
      mariadb:
        condition: service_healthy
    build:
      context: requirements/bonus/adminer
      dockerfile: Dockerfile
      args:
        - ADMINER_ROOT=${ADMINER_ROOT}
        - ADMINER_VERSION=${ADMINER_VERSION}
        - PHP_VERSION=${PHP_VERSION}
    init: true
    networks:
      - inception_network
    volumes:
      - adminer:${ADMINER_ROOT}
    env_file: .env
    environment:
      - WORDPRESS_DB_HOST=mariadb:3306
      - MYSQL_PASSWORD_FILE=/run/secrets/db_password
    healthcheck:
      test: >
        SCRIPT_FILENAME=/healthcheck.php
        REQUEST_METHOD=GET
        cgi-fcgi -bind -connect adminer:9000 | grep 'OK' || exit 1
      interval: 4s
      retries: 20
      start_period: 6s
      timeout: 30s
    secrets:
      - db_password
    restart: always
  static_website:
    build:
      context: requirements/bonus/static_website
      dockerfile: Dockerfile
      args:
        - STATIC_WEBSITE_FQDN=${STATIC_WEBSITE_FQDN}
        - STATIC_WEBSITE_ROOT=${STATIC_WEBSITE_ROOT}
    init: true
    networks:
      - inception_network
    volumes:
      - static_website_files:${STATIC_WEBSITE_ROOT}
    env_file: .env
    healthcheck:
      test: service nginx status || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always
  stfp:
    build:
      context: requirements/bonus/sftp
      dockerfile: Dockerfile
    init: true
    networks:
      - inception_network
    ports:
      - "22:22"
    volumes:
      - static_website_files:${STATIC_WEBSITE_ROOT}
    env_file: .env
    environment:
      - SFTP_PASSWORD_FILE=/run/secrets/sftp_password
    # healthcheck:
    #     test:
    #         - CMD
    #         - curl
    #         - '-f'
    #         - 'http://localhost:9000/minio/health/live'
    #     retries: 3
    #     timeout: 5s
    secrets:
      - sftp_password
    restart: always

networks:
  inception_network:

volumes:
  wordpress_db:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${DATA_DIR}/wordpress_db
  wordpress_files:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${DATA_DIR}/wordpress_files
  # Bonus
  redis_dump:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${DATA_DIR}/redis_dump
  adminer:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${DATA_DIR}/adminer
  static_website_files:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${DATA_DIR}/static_website


secrets:
  db_password:
    file: ../secrets/db_password.txt
  db_root_password:
    file: ../secrets/db_root_password.txt
  credentials:
    file: ../secrets/credentials.txt
  # Bonus
  redis_password:
    file: ../secrets/redis_password.txt
  vsftpd_password:
    file: ../secrets/vsftpd_password.txt
  sftp_password:
    file: ../secrets/sftp_password.txt
